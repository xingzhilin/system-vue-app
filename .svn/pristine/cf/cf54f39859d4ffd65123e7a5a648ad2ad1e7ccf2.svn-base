<template>
    <div class="roleAuthority">
        <el-tabs>
          <el-tab-pane>
                <span slot="label">
                    <el-button type="primary" plain autofocus>业务权限设置</el-button>
                </span>
                <el-col>
                  <el-tree
                    :default-expand-all="expand"
                    :props="props"
                    :data="treeData"
                    show-checkbox
                    node-key="id"
                    @check-change="handleCheckChange">
                  </el-tree>
                </el-col>
          </el-tab-pane>
          <el-tab-pane label="消息中心">
              <span slot="label">
                <el-button type="primary" plain>消息推送设置</el-button>
              </span>
              <el-col>
                <el-tree
                  :default-expand-all="expand"
                  :props="msgPushesProps"
                  :data="msgPushesTree"
                  show-checkbox
                  node-key="id"
                  @check-change="handleCheckChange">
                </el-tree>
              </el-col>
          </el-tab-pane>
         </el-tabs>
         <el-col>
            <el-button type="primary" @click="saveSubmit">保存</el-button>
            <router-link :to="{path:'/backstage/role'}">
                <el-button>取消</el-button>
            </router-link>
         </el-col>
    </div>
</template>
<script>
    import {roleTree} from '../../../api/api.js'
    export default {
        data() {
          return {
            props: {
              label: 'name',
              children: 'subMenu'
            },
            msgPushesProps: {
              label: 'eventName',
              children: 'subBtns'
            },
            msgPushesTree:[],
            ruleForm:{
              roleName: '',
              delFlag: '',
              remark: '',
              msgPushes:[],
            },
            treeData:[],
            expand:true
          };
        },
        created(){
          let data = JSON.parse(this.$route.query.data);
          $.extend(this.ruleForm,data);
           roleTree({}, res => {
                this.treeData = res.data;
           });
           this.$axios.get('http://'+window.location.host+'/static/json/roleMessage.json').then(res => {
              let data = res.data.data;
              this.msgPushesTree = data;
              data[0].subBtns.forEach(v=>{
                  this.ruleForm.msgPushes.push({
                    eventName:v.eventName,
                    approvalEve:0,
                    rejectEve:0,
                    successEve:0
                  });
              });
           });
          
            
        },
        methods: {
          handleCheckChange(data, checked, indeterminate) {
            console.log(data, checked, indeterminate);
            if(data.parentName){
              this.ruleForm.msgPushes.forEach(v=>{
                  if(v.eventName == data.parentName){
                    let isChecked = checked == true ? 1 : 0;
                    v[data.eventCode] = isChecked;
                  }
              });
            }
          },
          saveSubmit(){
            console.log(this.ruleForm)
            this.$axios.post('http://192.168.11.98:9001/admin/basics/userRole',this.ruleForm).then(res=>{
              console.log(res)
              let data = res.data;
              if(data.status == 200){
                this.$router.push('/backstage/role');
              }
            });
          }
        }
      };
</script>
<style scoped>
    .roleAuthority {
        padding: 30px;
    }
    .el-tree {
        margin: 20px 0 50px 0;
    }
    .el-tabs .el-tabs__nav-wrap::after {
        display: none;
    }
</style>