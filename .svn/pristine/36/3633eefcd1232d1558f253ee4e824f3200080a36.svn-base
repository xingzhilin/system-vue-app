<template>
    <div class="roleAuthority">
        <el-tabs>
          <el-tab-pane>
                <span slot="label">
                    <el-button type="primary" plain autofocus>业务权限设置</el-button>
                </span>
                <el-col>
                  <el-tree
                    :default-expand-all="expand"
                    :props="props"
                    :data="treeData"
                    ref="tree"
                    :check-strictly="true"
                    :default-checked-keys="treeArr"
                    show-checkbox
                    node-key="id"
                    @check-change="handleCheckChangeTree">
                  </el-tree>
                </el-col>
          </el-tab-pane>
          <el-tab-pane label="消息中心">
              <span slot="label">
                <el-button type="primary" plain>消息推送设置</el-button>
              </span>
              <el-col>
                <el-tree
                  :default-expand-all="expand"
                  :props="msgPushesProps"
                  :data="msgPushesTree"
                  :default-checked-keys="checkedArr"
                  show-checkbox
                  node-key="id"
                  @check-change="handleCheckChange">
                </el-tree>
              </el-col>
          </el-tab-pane>
         </el-tabs>
         <el-col>
            <el-button type="primary" @click="saveSubmit">保存</el-button>
            <router-link :to="{path:'/backstage/role'}">
                <el-button>取消</el-button>
            </router-link>
         </el-col>
    </div>
</template>
<script>
    export default {
        data() {
          return {
            treeArr:[],
            checkedArr:[],
            props: {
              label: 'name',
              children: 'subMenu'
            },
            msgPushesProps: {
              label: 'eventName',
              children: 'subBtns'
            },
            msgPushesTree:[],
            ruleForm:{
              roleName: '',
              delFlag: '',
              remark: '',
              msgPushes:[],
              menuAuths:[],
              btnAuths:[]
            },
            treeData:[],
            expand:true
          };
        },
        created(){
          let data = JSON.parse(this.$route.query.data);
          $.extend(this.ruleForm,data);
          this.treeInit();
          this.treeCheckedInit();
          this.messagetreeInit();
          
          
            
        },
        methods: {
          handleCheckChange(data, checked, indeterminate) {
            console.log(data, checked, indeterminate);
            if(data.parentName){
              this.ruleForm.msgPushes.forEach(v=>{
                  if(v.eventName == data.parentName){
                    let isChecked = checked == true ? 1 : 0;
                    v[data.eventCode] = isChecked;
                  }
              });
            }
          },
          setChildrenNodeFalse(subMenu){  //父节点取消勾选，子节点同时取消
            subMenu.forEach(v=>{
              this.$refs.tree.setChecked(v.id,false);
              if(subMenu.subMenu)
                this.setChildrenNodeFalse(subMenu.subMenu);
            });
          },
          handleCheckChangeTree(data, checked, indeterminate) {
            console.log(data, checked, indeterminate);
            if(checked){ //子节点选中，父辈全部选中
              this.$refs.tree.setChecked(data.parentId,true)
            }else{
              if(data.subMenu)
                this.setChildrenNodeFalse(data.subMenu);
            }
                


            // if(data.btnCode){
            //   this.ruleForm.btnAuths.forEach(v=>{
            //       if(v.menuId == data.parentId){
            //         let isChecked = checked == true ? 1 : 0;
            //         v[btnCode] = isChecked;
            //       }
            //   });
            // }else{
            //   this.ruleForm.menuAuths.forEach((v,i)=>{
            //     if(!checked){

            //     }
            //       if(v.menuId == data.id){
                    
            //           this.ruleForm.menuAuths.splice(i,1);
            //       }
            //   });
            // }
          },
          saveSubmit(){
            // console.log(this.ruleForm)
            let checkedData = this.$refs.tree.getCheckedNodes();
            if(checkedData)
              checkedData.forEach(v=>{
                  
                  if(v.btnCode){//  按钮节点
                    // var hasFlag = true;
                    // this.ruleForm.btnAuths.forEach(v1=>{
                    //     if(v1.menuId == v.parentId){
                    //       v1[v.btnCode] = 1;
                    //       hasFlag = false;
                    //       return;
                    //     }
                    // });
                    // if(hasFlag){
                      let obj = {};
                      obj[v.btnCode] = 1;
                      obj.menuId = v.parentId;
                      this.ruleForm.btnAuths.push(obj);
                    // }
                  }else{  //tree节点
                    this.ruleForm.menuAuths.push(v.id);
                  }
                  // var hasmenuAuthsFlag = true;
                  // this.ruleForm.menuAuths.forEach(v2=>{
                  //   if(v2.menuId == v.parentId){   
                  //     hasmenuAuthsFlag = false;              
                  //     return;
                  //   }
                  // });
                  // if(hasmenuAuthsFlag)
                  //   this.ruleForm.menuAuths.push({
                  //       menuId:this.$refs.tree.getNode(v.parentId).data.id,
                  //       menuName: this.$refs.tree.getNode(v.parentId).data.name
                  // });
              });
            console.log(this.ruleForm)
            this.$axios.post('http://192.168.11.98:9001/admin/basics/userRole',this.ruleForm).then(res=>{
              let data = res.data;
              if(data.status == 200){
                this.$router.push('/backstage/role');
              }
            });
          },
          treeCheckedSet(treeData){
             treeData.forEach(v=>{
                // this.ruleForm.menuAuths.push({
                //     menuId:v.id,
                //     menuName:v.name
                // });
                this.treeArr.push(v.id);
                if(v.subMenu){
                  this.treeCheckedSet(v.subMenu);
                }
                if(v.subBtns){
                  // let obj = {};
                  v.subBtns.forEach(v1=>{
                      // obj[v1.btnCode] = 1;
                      // obj.menuId = v1.id;
                      this.treeArr.push(v1.id);
                  });
                  // this.ruleForm.btnAuths.push(obj);
                  v.subMenu = v.subBtns;
                }

             });
          },
          treeSet(treeData){
             treeData.forEach(v=>{
                if(v.subMenu){
                  this.treeSet(v.subMenu);
                }
                if(v.subBtns){
                  v.subMenu = v.subBtns;
                }

             });
          },
          treeInit(){
            // 初始化权限tree
            this.$axios.get('http://192.168.11.98:9001/admin/roleAuthTree').then(res=>{
                console.log(res.data)
                this.treeSet(res.data.result);
                this.treeData = res.data.result;
             });
          },
          treeCheckedInit(){
            // 默认选中节点的id获取 treeSet
            this.$axios.post('http://192.168.11.98:9001/admin/roleAuths/'+this.ruleForm.roleId ).then(res=>{
                // console.log(res.data)
                let data = res.data;
                let treeData = data.result[0].roleAuths;
                this.treeCheckedSet(treeData);
                // this.treeData = treeData;
             });
          },
          messagetreeInit(){
              this.$axios.get('http://192.168.11.98:9001/admin/basics/userRoles/'+this.ruleForm.roleId).then(res => {
                // console.log(res.data)
                let data = res.data.result;
                this.msgPushesTree = [{
                  "eventName": "全选",
                  "subBtns":data.roleMsgConfigs
                }];
                data.roleMsgConfigs.forEach(v=>{ 
                    var obj = {
                      eventName:v.eventName
                    };
                    v.subBtns.forEach(v1=>{
                      if(v1.isChecked == "1"){
                        obj[v1.eventCode] = 1;
                        this.checkedArr.push(v1.id);
                      }else{
                        obj[v1.eventCode] = 0;
                      }
                    });
                    this.ruleForm.msgPushes.push(obj);

                });
              });
          }
        }
      };
</script>
<style scoped>
    .roleAuthority {
        padding: 30px;
    }
    .el-tree {
        margin: 20px 0 50px 0;
    }
    .el-tabs .el-tabs__nav-wrap::after {
        display: none;
    }
</style>